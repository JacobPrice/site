webpackJsonp([3205681535038],{401:function(n,a){n.exports={data:{site:{siteMetadata:{title:"Jacob Price",author:"Jacob Price"}},markdownRemark:{id:"/Users/Price/github/site/src/pages/blog/2017-12-06---Creating-a-Node-CLI-for-this-blog/index.md absPath of file >>> MarkdownRemark",html:'<p>Most developers are what I call ‘ambitiously lazy’, including myself… That is\nnot a derogatory remark, but rather a side effect of power, great power.</p>\n<blockquote>\n<p>With great power comes great responsibility.</p>\n<p>— Spiderman</p>\n<p>Saturday - Nov 10,2012(2:00 am)</p>\n</blockquote>\n<p>The power that developers have is that they can utilize the wonderful world of\nprogramming to accomplish a goal. Now, this can be a great thing, but can also\nlead to some serious rabbit holes. We’ve all heard the stories of someone taking\nhours to solve something that routinely takes them like 2 minutes. My particular\ncase that I’m going to share today is not really that bad because it didn’t take\nme a substantial period of time, but I am guilty of spending a little to much\ntime on issues that were less than minor.</p>\n<p>The benefits of the automation should truly be measured to ensure that time is\nnot unnecessarily allocated to fixing something that isn’t an issue.</p>\n<p>Back to today’s post.</p>\n<p>Later I will write up more about the technologies my site uses, you can view the\nsource <a href="https://github.com/JacobPrice/site">here</a> if you’d like. Basically, all\nyou need to know to understand why I did this, is that I write my posts in\nmarkdown. I have it set up so that I am able to utilize frontmatter to label my\npost with a title and give a timestamp. These posts live in a folder structure\nlike so:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>├── blog\n   ├── Creating-a-Node-CLI-for-this-blog\n   │   └── index.md\n   └── day-0\n       └── index.md</code></pre>\n      </div>\n<p>The index.md file has the front matter I mentioned which looks like this.</p>\n<div class="gatsby-highlight">\n      <pre class="language-markdown"><code><span class="token hr punctuation">---</span>\ntitle: \'Creating a Node CLI for this blog\'\n<span class="token title important">date: \'2017-12-06T23:06:25.808Z\'\n<span class="token punctuation">---</span></span>\n\nMost developers are what I call \'ambitiously lazy\', including myself…\n</code></pre>\n      </div>\n<p>As you can probably guess, I’m not typing out that date. I can read binary if I\nreally try (I’m a nerd), but nope not writing that date. I decided that I would\nstart a CLI for my site and being able to create a new post seemed like the\nperfect place to start.</p>\n<p>Really I didn’t need much. I just wanted to be able to create a post by running\n<code>npm run create-post</code> -> type the title and then be done.</p>\n<p>I accomplished just that by doing the following</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs-extra\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> prompt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'prompt\'</span><span class="token punctuation">)</span>\n\nprompt<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">\'\'</span>\nprompt<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nprompt<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'title\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`The post \'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>res<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\' has been created!`</span></span><span class="token punctuation">)</span>\n\n  <span class="token comment">// Make the directory</span>\n  <span class="token keyword">let</span> title <span class="token operator">=</span> res<span class="token punctuation">.</span>title<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'-\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> dir <span class="token operator">=</span> <span class="token template-string"><span class="token string">`./src/pages/blog/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>\n  fs<span class="token punctuation">.</span><span class="token function">ensureDir</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span>\n\n  <span class="token comment">// Make the new empty post</span>\n  <span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> newPost <span class="token operator">=</span> <span class="token template-string"><span class="token string">`---\ntitle: \'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>res<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\'\ndate: \'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>now<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\'\n---\n  `</span></span>\n  <span class="token keyword">let</span> postPath <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/index.md`</span></span>\n  fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>postPath<span class="token punctuation">,</span> newPost<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> fileContents<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>That resulted in the following process.</p>\n<p><img src="https://media.giphy.com/media/3oxHQuntMljWKIxBeg/giphy.gif"></p>\n<p>It really wouldn’t be difficult to create a new folder and file for each post,\nbut I’m a developer and I make things a little bit easier when I can.</p>',frontmatter:{title:"Creating A Node CLI For This Blog",date:"December 06, 2017"}}},pathContext:{slug:"/blog/2017-12-06---Creating-a-Node-CLI-for-this-blog/"}}}});
//# sourceMappingURL=path---blog-2017-12-06-creating-a-node-cli-for-this-blog-08e6e5d2c73e74982a3a.js.map